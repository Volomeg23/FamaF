1)

    db.theaters.aggregate([
    {
        $group: {
            _id: "$location.address.state",
            theaters : { $sum : 1 }
            }
        }
    ]);

2)

    db.theaters.aggregate([
    {
        $group: {
            _id: "$location.address.state",
            theaters : { $sum : 1 }
            }
        },
    {
     $match : { "theaters" : { $gte : 2} }
    },
    {
      $count : "theaters_qty"
    }
    ]);

3)

db.movies.aggregate([
   {    
      $match : { "directors" : {$in : [ "Louis Lumière" ] } 
               }
    },
    {
        $count : "movies_from_Louis"
    }
])


4)

db.movies.aggregate([
   {    
      $match : { "year" : {$gte : 1950, $lte : 1959 } 
               }
    },
    {
        $count : "movies_from_the_'50"
    }
])

5)

db.movies.aggregate ([
{
    $unwind : "$genres"
},
{
    $group : {
        _id : "$genres",
        movies : { $sum : 1}
        }
},
{
    $sort :{ movies : -1}
},
{
    $limit : 10
}
])

6)

db.comments.aggregate([
{
    $group : {
        _id : "$name",
        comments_count : { $sum : 1}
        }
},
{
    $project : { "name" : 1, "email" : 1, "comments_count" : 1 }
},
{ 
    $sort : { comments_count : -1 }
},
{
    $limit : 10
}
])

7)

db.movies.aggregate([
{
      $match : { "year" : {$gte : 1980, $lte : 1989 }, "imdb.rating" : { $gt : 0} }
    },
    {
      $group : {
            _id : "$year",
            min_rating : { $min : "$imdb.rating" },
            avg_rating : { $avg : "$imdb.rating" },
            max_rating : { $max : "$imdb.rating" }
            }
    },
    {
        $sort : { avg_rating : -1 }
    }
]) 

8)

db.movies.aggregate([
{
  $lookup: {
    from: "comments",
    localField: "_id",
    foreignField: "movie_id",
    as: "comments"
    }   
},
{
    $addFields : { "comments_count" : { $size : "$comments" }}
},
{
    $project : {"_id" : 0, "title" :1, "year" : 1, "comments_count" : 1 }
},
{ 
    $sort : { comments_count : -1 }
},
{
    $limit : 10
}
])

9)
db.createView("generos","movies", [{pipeline siguiente}])

db.movies.aggregate([
{
    $unwind : "$genres"
},
{
    $lookup : {
        from: "comments",
        localField : "_id",
        foreignField: "movie_id",
        as : "comments"
        }
},
{
    $addFields : { "comments_count" : { $size : "$comments" }}
},
{
    $project : { _id : 0, genres : 1, comments_count : 1}
},
{
    $group : {
        "_id" : "$genres",
        "comments_sum" : { $sum : "$comments_count" }
        }
},
{
    $sort : { "comments_sum" : -1 }
},
{
    $limit : 5
}
])

10)



db.movies.aggregate([
    {
        $match : { "directors" : {$in : ["Jules Bass"]} 
                   }
    },
    {
        $unwind : "$cast"
    },
    {
        $group: {
          _id: "$cast",
          movies: {
            $addToSet: {
              title: "$title",
              year: "$year"
            }
        },
        "movies_count" : {$sum : 1}
        }
    },
    {
        $match : { "movies_count": {$gte : 2 } }
    },
    {
        $project: {
          _id: 0,
          actor: "$_id",
          movies: 1,
          movies_count :1
        }
    }
    ])

11)
       
db.users.aggregate([
{
    $lookup : {
        from : "comments",
        localField : "name",
        foreignField: "name",
        as : "comments"
        }
},
{
     $lookup: {
            from: "movies",
            localField : "comments.movie_id",
            foreignField : "_id",
            as : "movies_ref",
            
    }
},
{
    $project : { "_id" : 0, "name" : 1, "email" : 1, "comments.date" : 1, "movie_ref.title" : 1, "movie_ref.released" : 1 }
}
])



db.users.aggregate([
  {
    $lookup: {
      from: "comments",
      localField: "name",
      foreignField: "name",
      as: "comments"
    }
  },
  {
    $unwind: "$comments"
  },
  {
    $lookup: {
      from: "movies",
      localField: "comments.movie_id",
      foreignField: "_id",
      as: "movie_ref"
    }
  },
{
    $unwind: "$movie_ref"
},
  {
    $match: {
      $expr: {
        $and: [
          { $eq: [{ $month: "$comments.date" }, { $month: "$movie_ref.released" }] },
          { $eq: [{ $year: "$comments.date" }, { $year: "$movie_ref.released" }] }
        ]
      }
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      email: 1,
      "comments.date": 1,
      "movie_ref.title": 1,
      "movie_ref.released": 1
    }
  }
])


11)

a.

db.restaurants.aggregate([
 {
     $unwind : "$grades"
 },
{
    $match : { "grades.score" : { $gt : 0.0 }  }
},
{
 $group: {
  _id: "$restaurant_id",
  grades : {
    "$accumulator": {
      init: function() {
        return { 
          count: 0, 
          sum: 0, 
          max: Number.NEGATIVE_INFINITY, 
          min: Number.POSITIVE_INFINITY 
        }
      },
      accumulate: function(state, current) {
        return {
          count: state.count + 1,
          sum: state.sum + numCopies,
          max: Math.max(state.max, current), // Calcula el máximo
          min: Math.min(state.min, current) // Calcula el mínimo
        }
      },
      accumulateArgs: ["$grades.score"],
      merge: function(state1, state2) {
        return {
          count: state1.count + state2.count,
          sum: state1.sum + state2.sum,
          max: Math.max(state1.max, state2.max), // Combina los máximos
          min: Math.min(state1.min, state2.min) // Combina los mínimos
        }
      },
      finalize: function(state) {
        return {
          average: state.sum / state.count,
          max: state.max, // Devuelve el máximo
          min: state.min // Devuelve el mínimo
        }
      },
      lang: "js"
    }
  }
}
},
{
    $project : { _id : 0, restaurant_id : 1, name : 1, max_grades : "$grades.max", min_grades : "$grades.min", avg_grades : "$grades.sum"}

}
])

NO RECONOCE ACCUMULATORS


a)



db.restaurants.aggregate([
 {
     $unwind : "$grades"
 },
{
    $match : { "grades.score" : { $gt : 0.0 }  }
},
{
    $group: {
       _id : "$restaurant_id",
        "max_grades" : { $max : "$grades.score" },
        "min_grades" : { $min : "$grades.score" }
        }

},
{
     $project: { "_id": 1, "restaurant_id" : 1, "name": 1 , "max_grades": 1, "min_grades" : 1 }
     
}
])

b)


db.restaurantes.aggregate([
  {
    $sort: { "grades.score": 1 } // Ordenar por puntuación de menor a mayor
  },
  {
    $project: {
      _id: 0,
      restaurant_id: 1,
      max_puntuacion: { $arrayElemAt: ["$grades.score", -1] },
      min_puntuacion: { $arrayElemAt: ["$grades.score", 0] },
      suma_puntuacion: { $sum: "$grades.score" } 
    }
  },
])







13)

db.restaurantes.aggregate([
{
      $addFields: {
        "average_score": { $avg: "$grades.score" }
      }
},
  {
    $addFields: {
      "grade": {
        $cond: {
          if: {$and: [{$gte: ["$average_score", 0]}, {$lt: ["$average_score", 13]}] },
          then: "A",
          else: {
            $cond: {
              if: { $and: [{$gte: ["$average_score", 13]}, {$lt: ["$average_score", 28]}] },
              then: "B",
              else: {
                $cond: {
                  if: { $gte: ["$average_score", 28] },
                  then: "C",
                  else: "D" 
                }
              }
            }
          }
        }
      }
    }
  }
])

db.restaurants.updateMany({},{ $set : {"average_score": { $ avg : "$grades.score" } } })

db.restaurantes.aggregate([
{
      $addFields: {
        "average_score": { $avg: "$grades.score" }
      }
},
{
     $project: {
      "grade": {
            $set: {
                    $switch: {
                        branches: [
                          { case: { $and: [{$gte: ["$average_score", 0]}, {$lte: ["$average_score", 13]}] }, then: "A" },
                          { case: { $and: [{$gte: ["$average_score", 14]}, {$lte: ["$average_score", 27]}] }, then: "B" },
                          { case: { $gte: ["$average_score", 28] }, then: "C" }
                        ],
                        default: "D" // Opcional, para valores que no cumplan ninguna condición
                    }
                 }
            }
      }
}
])











